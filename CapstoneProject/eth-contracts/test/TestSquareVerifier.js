// define a variable to import the <Verifier> or <renamedVerifier> solidity contract generated by Zokrates
const zokratesGeneratedProof = require("../../zokrates/code/square/proof.json");
const SquareVerifier = artifacts.require('verifier');

contract('TestSquareVerifier', accounts => {
    describe('proof verification', function() {
        beforeEach(async function(){
            this.contract = await SquareVerifier.new();
        });

        // Test verification with correct proof
        // - use the contents from proof.json generated from zokrates steps
        it('verification with correct proof', async function(){
            let result = await this.contract.verifyTx.call(...Object.values(zokratesGeneratedProof.proof), zokratesGeneratedProof.inputs);
            assert.equal(result, true, "correct is not working");
        });
        // Test verification with incorrect proof
        it('should not verify with incorrect proof', async function(){
            let randomInputs = [
                "0x0000000000000000000000000000000000000000000000000000000000000001",
                "0x0000000000000000000000000000000000000000000000000000000000000001"
            ];

            let result = await this.contract.verifyTx.call(...Object.values(zokratesGeneratedProof.proof), randomInputs);
            assert.equal(result, false, "incorrect proof is working");
        });
    });
});
    
